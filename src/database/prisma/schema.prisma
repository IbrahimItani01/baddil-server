datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profit {
  id         Int          @id @default(autoincrement())
  amount     Float
  source     ProfitSource
  date       DateTime     @default(now())
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  @@map("profits")
}

enum ProfitSource {
  subscription
  hire_budget
}

model Expense {
  id           Int         @id @default(autoincrement())
  amount       Float
  description  String // Salary, broker compensation, etc.
  expense_type ExpenseType
  date         DateTime    @default(now())
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@map("expenses")
}

enum ExpenseType {
  salary
  broker_compensation
  other
}

// Users Table
model User {
  id              Int      @id @default(autoincrement())
  profile_picture String? // Path of user image
  name            String
  email           String   @unique
  password        String
  firebase_uid    String?
  device_token    String?
  is_deleted      Boolean  @default(false)
  user_type_id    Int
  user_status_id  Int
  settings_id     Int
  subscription_id Int?
  tier_id         Int?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user_type     UserType          @relation(fields: [user_type_id], references: [id])
  user_status   UserStatus        @relation(fields: [user_status_id], references: [id])
  settings      Setting           @relation(fields: [settings_id], references: [id])
  subscription  SubscriptionPlan? @relation(fields: [subscription_id], references: [id])
  tier          Tier?             @relation(fields: [tier_id], references: [id])
  Message       Message[]
  Chat1         Chat[]            @relation("User1Chats")
  Chat2         Chat[]            @relation("User2Chats")
  Wallet        Wallet[]
  RatingWroteBy Rating[]          @relation("WroteBy")
  RatingBroker  Rating[]          @relation("Broker")
  HireBroker    Hire[]            @relation("BrokerHire")
  HireClient    Hire[]            @relation("ClientHire")
  DisputeAdmin  Dispute[]         @relation("AdminDispute")
  DisputeUser1  Dispute[]         @relation("User1Dispute")
  DisputeUser2  Dispute[]         @relation("User2Dispute")
  Barter1       Barter[]          @relation("User1Barter")
  Barter2       Barter[]          @relation("User2Barter")

  @@map("users")
}

// User Types Table
model UserType {
  id   Int    @id @default(autoincrement())
  type String

  users            User[]
  SubscriptionPlan SubscriptionPlan[]

  @@map("user_types")
}

// User Statuses Table
model UserStatus {
  id     Int    @id @default(autoincrement())
  status String

  users User[]

  @@map("user_statuses")
}

// Settings Table
model Setting {
  id            Int      @id @default(autoincrement())
  language      Language @default(english)
  theme         Theme    @default(light)
  notifications Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  users User[]

  @@map("settings")
}

enum Language {
  english
  french
}

enum Theme {
  dark
  light
}

// Tiers Table
model Tier {
  id          Int    @id @default(autoincrement())
  name        String
  requirement Int

  users User[]

  @@map("tiers")
}

// Subscription Plans Table
model SubscriptionPlan {
  id               Int      @id @default(autoincrement())
  name             String
  price            Float
  target_user_type Int
  criteria         String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  user_type UserType  @relation(fields: [target_user_type], references: [id])
  features  Feature[]

  users User[]

  @@map("subscription_plans")
}

model Feature {
  id                   Int    @id @default(autoincrement())
  subscription_plan_id Int
  feature              String

  subscription_plan SubscriptionPlan @relation(fields: [subscription_plan_id], references: [id])

  @@map("features")
}

// Categories Table
model Category {
  id            Int    @id @default(autoincrement())
  name          String
  category_icon String

  subcategories Subcategory[]
  Item          Item[]

  @@map("categories")
}

// Subcategories Table
model Subcategory {
  id               Int      @id @default(autoincrement())
  name             String
  main_category_id Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  category Category @relation(fields: [main_category_id], references: [id])
  Item     Item[]

  @@map("subcategories")
}

// Messages Table
model Message {
  id        Int           @id @default(autoincrement())
  content   String
  owner_id  Int
  status    MessageStatus @default(sent)
  chat_id   Int
  timestamp DateTime      @default(now())

  owner User @relation(fields: [owner_id], references: [id])
  chat  Chat @relation(fields: [chat_id], references: [id])

  @@map("messages")
}

enum MessageStatus {
  sent
  seen
}

// Chats Table
model Chat {
  id        Int  @id @default(autoincrement())
  user1_id  Int?
  user2_id  Int?
  barter_id Int?

  user1   User?     @relation("User1Chats", fields: [user1_id], references: [id])
  user2   User?     @relation("User2Chats", fields: [user2_id], references: [id])
  barter  Barter?   @relation(fields: [barter_id], references: [id])
  Message Message[]

  @@map("chats")
}

// Wallets Table
model Wallet {
  id         Int      @id @default(autoincrement())
  owner_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  owner User   @relation(fields: [owner_id], references: [id])
  Item  Item[]

  @@map("wallets")
}

// Items Table
model Item {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  category_id    Int
  subcategory_id Int
  condition      ItemCondition
  location_id    Int
  wallet_id      Int
  value          Float
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  images         ItemImage[]

  category        Category    @relation(fields: [category_id], references: [id])
  subcategory     Subcategory @relation(fields: [subcategory_id], references: [id])
  location        Location    @relation(fields: [location_id], references: [id])
  wallet          Wallet      @relation(fields: [wallet_id], references: [id])
  Hire            Hire[]
  BarterUser1Item Barter[]    @relation("User1ItemBarter")
  BarterUser2Item Barter[]    @relation("User2ItemBarter")

  @@map("items")
}

model ItemImage {
  id      Int    @id @default(autoincrement())
  item_id Int
  path    String

  item Item @relation(fields: [item_id], references: [id])

  @@map("item_images")
}

enum ItemCondition {
  used
  new
  refurbished
}

// Locations Table
model Location {
  id         Int      @id @default(autoincrement())
  name       String
  longitude  Float
  latitude   Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Item       Item[]
  Meetup     Meetup[]

  @@map("locations")
}

// Ratings Table
model Rating {
  id          Int      @id @default(autoincrement())
  value       Int // 1 to 5
  description String
  wrote_by    Int
  broker_id   Int?
  barter_id   Int?
  created_at  DateTime @default(now())

  wrote_by_user User    @relation("WroteBy", fields: [wrote_by], references: [id])
  broker        User?   @relation("Broker", fields: [broker_id], references: [id])
  barter        Barter? @relation(fields: [barter_id], references: [id])

  @@map("ratings")
}

// Hires Table
model Hire {
  id             Int        @id @default(autoincrement())
  target_item_id Int
  broker_id      Int
  client_id      Int
  budget         Float
  status         HireStatus @default(pending)
  completed_at   DateTime?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  item   Item @relation(fields: [target_item_id], references: [id])
  broker User @relation("BrokerHire", fields: [broker_id], references: [id])
  client User @relation("ClientHire", fields: [client_id], references: [id])

  @@map("hires")
}

enum HireStatus {
  pending
  ongoing
  cancelled
  completed
}

// Disputes Table
model Dispute {
  id          Int           @id @default(autoincrement())
  admin_id    Int
  user1_id    Int
  user2_id    Int
  details     String
  status      DisputeStatus @default(ongoing)
  resolved_at DateTime?
  created_at  DateTime      @default(now())

  admin User @relation("AdminDispute", fields: [admin_id], references: [id])
  user1 User @relation("User1Dispute", fields: [user1_id], references: [id])
  user2 User @relation("User2Dispute", fields: [user2_id], references: [id])

  @@map("disputes")
}

